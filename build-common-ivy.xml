<?xml version="1.0"?>
<!DOCTYPE project>

<project name="build-common-ivy" xmlns:antelope="antlib:ise.antelope.tasks" xmlns:ivy="antlib:org.apache.ivy.ant">
	<property name="ivy.home" value="${sdk.dir}/.ivy" />

	<basename property="basedir.name" file="${basedir}" />

	<propertyregex
		input="${basedir.name}"
		property="ivy.module.name"
		regexp="(.*)\-(.*)$"
		select="com.liferay.\1"
	/>

	<propertyregex
		input="${ivy.module.name}"
		override="true"
		property="ivy.module.name"
		regexp="\-"
		replace="\."
	/>

	<macrodef name="md5check">
		<attribute name="file" />
		<attribute name="md5.url" />

		<sequential>
			<local name="curl" />
			<local name="valid.checksum" />

			<exec executable="curl" outputproperty="curl">
				<arg line="-s -o @{file}.md5 --write-out %{http_code} @{md5.url}" />
			</exec>

			<if>
				<not>
					<contains string="${curl}" substring="200" />
				</not>
				<then>
					<delete file="@{file}.md5" />
				</then>
			</if>

			<if>
				<available file="@{file}.md5" />
				<then>
					<local name="md5.checksum" />

					<loadfile property="md5.checksum" srcFile="@{file}.md5" />

					<propertyregex
						input="${md5.checksum}"
						property="md5.checksum"
						override="true"
						regexp="^(\w+)"
						select="\1"
					/>

					<checksum file="@{file}" property="${md5.checksum}" verifyproperty="valid.checksum" />
				</then>
				<else>
					<property name="valid.checksum" value="true" />
				</else>
			</if>

			<if>
				<isfalse value="${valid.checksum}" />
				<then>
					<fail message="@{file} failed checksum." />
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="mirrors-get">
		<attribute name="dest" />
		<attribute default="false" name="ignoreerrors" />
		<attribute name="src" />
		<attribute default="true" name="trylocalnetwork" />
		<attribute default="false" name="verbose" />

		<sequential>
			<local name="src" />

			<property name="src" value="@{src}" />

			<propertyregex
				input="${src}"
				override="true"
				property="src"
				regexp="http://mirrors/"
				replace="http://mirrors.lax.liferay.com/"
			/>

			<propertyregex
				input="${src}"
				override="true"
				property="mirrors.cache.artifact.subdir"
				regexp="https?://(.+/).+"
				replace="\1"
			/>

			<property name="mirrors.cache.artifact.dir" value="${mirrors.cache.dir}/${mirrors.cache.artifact.subdir}" />

			<propertyregex
				input="${src}"
				override="true"
				property="mirrors.cache.artifact.file.name"
				regexp=".+/(.+)"
				replace="\1"
			/>

			<if>
				<not>
					<available file="${mirrors.cache.artifact.dir}/${mirrors.cache.artifact.file.name}" />
				</not>
				<then>
					<mkdir dir="${mirrors.cache.artifact.dir}" />

					<propertyregex
						input="${src}"
						override="true"
						property="mirrors.src"
						regexp="http://"
						replace="http://mirrors.lax.liferay.com/"
					/>

					<if>
						<equals arg1="@{trylocalnetwork}" arg2="true" />
						<then>
							<trycatch>
								<try>
									<get
										dest="${mirrors.cache.artifact.dir}"
										ignoreerrors="@{ignoreerrors}"
										src="${mirrors.src}"
										verbose="@{verbose}"
									/>
								</try>
								<catch>
									<get
										dest="${mirrors.cache.artifact.dir}"
										ignoreerrors="@{ignoreerrors}"
										src="${src}"
										verbose="@{verbose}"
									/>
								</catch>
							</trycatch>
						</then>
						<else>
							<get
								dest="${mirrors.cache.artifact.dir}"
								ignoreerrors="@{ignoreerrors}"
								src="${src}"
								verbose="@{verbose}"
							/>
						</else>
					</if>
				</then>
			</if>

			<if>
				<available file="@{dest}" type="dir" />
				<then>
					<copy
						file="${mirrors.cache.artifact.dir}/${mirrors.cache.artifact.file.name}"
						tofile="@{dest}/${mirrors.cache.artifact.file.name}"
					/>
				</then>
				<else>
					<copy
						file="${mirrors.cache.artifact.dir}/${mirrors.cache.artifact.file.name}"
						tofile="@{dest}"
					/>
				</else>
			</if>

			<var name="mirrors.cache.artifact.dir" unset="true" />
			<var name="mirrors.cache.artifact.file.name" unset="true" />
			<var name="mirrors.cache.artifact.subdir" unset="true" />
			<var name="mirrors.src" unset="true" />
		</sequential>
	</macrodef>

	<if>
		<not>
			<available file="${ivy.home}/ivy-${ivy.version}.jar" />
		</not>
		<then>
			<mkdir dir="${ivy.home}" />

			<mirrors-get
				dest="${ivy.home}"
				src="${ivy.jar.url}"
			/>
		</then>
	</if>

	<path id="ivy.lib.path">
		<fileset
			dir="${ivy.home}"
			includes="ivy-${ivy.version}.jar"
		/>
		<fileset
			dir="${sdk.dir}/lib"
			includes="bcpg-jdk16.jar,bcprov-jdk16.jar"
		/>
	</path>

	<taskdef classpathref="ivy.lib.path" resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" />

	<path id="sdk.dependencies.path">
		<dirset dir="${sdk.dir}" includes="dependencies/*" />
	</path>

	<pathconvert pathsep="," property="sdk.dependencies.path" refid="sdk.dependencies.path" targetos="unix" />

	<for list="${basedir},${sdk.dir},${sdk.dependencies.path}" param="ivy.xml.dir">
		<sequential>
			<if>
				<available file="@{ivy.xml.dir}/ivy.xml" />
				<then>
					<fixcrlf eol="lf" file="@{ivy.xml.dir}/ivy.xml" fixlast="false" />

					<checksum file="@{ivy.xml.dir}/ivy.xml" verifyproperty="ivy.xml.unmodified" />

					<if>
						<isfalse value="${ivy.xml.unmodified}" />
						<then>
							<ivy:settings file="${ivy.custom.settings.file}" />

							<ivy:resolve
								file="@{ivy.xml.dir}/ivy.xml"
								log="download-only"
								transitive="${ivy.resolve.transitive.dependencies}"
							/>

							<if>
								<or>
									<equals arg1="@{ivy.xml.dir}" arg2="${sdk.dir}" />
									<antelope:endswith string="${ant.project.name}" with="-shared" />
									<not>
										<available file="@{ivy.xml.dir}/docroot" />
									</not>
								</or>
								<then>
									<ivy:retrieve
										overwriteMode="always"
										pattern="@{ivy.xml.dir}/lib/[artifact].[ext]"
										type="bundle,jar,orbit"
									/>

									<ivy:retrieve
										overwriteMode="always"
										pattern="@{ivy.xml.dir}/lib/[artifact]-[type]s.[ext]"
										type="source"
									/>
								</then>
								<else>
									<ivy:retrieve
										overwriteMode="always"
										pattern="@{ivy.xml.dir}/docroot/WEB-INF/lib/[artifact].[ext]"
										type="bundle,jar,orbit"
									/>

									<ivy:retrieve
										overwriteMode="always"
										pattern="@{ivy.xml.dir}/docroot/WEB-INF/lib/[artifact]-[type]s.[ext]"
										type="source"
									/>
								</else>
							</if>

							<checksum file="@{ivy.xml.dir}/ivy.xml" forceoverwrite="true" />
						</then>
					</if>

					<var name="ivy.xml.unmodified" unset="true" />
				</then>
			</if>
		</sequential>
	</for>

	<target name="publish">
		<ivy:settings file="${sdk.dir}/ivy-settings-publisher.xml" />

		<ivy:resolve
			log="download-only"
			transitive="${ivy.resolve.transitive.dependencies}"
		/>

		<property name="ivy.pom.description" value="${plugin.name}" />
		<property name="ivy.pom.name" value="${plugin.name}" />

		<property name="plugin.release.qualifier" value="" />

		<property name="ivy.pom.version" value="${plugin.full.version}${plugin.release.qualifier}" />

		<ivy:makepom
			description="${ivy.pom.description}"
			ivyfile="ivy.xml"
			pomfile="${plugin.pom.file}"
			templatefile="${sdk.dir}/tools/pom_tmpl/template.pom"
		/>

		<ivy:publish
			forcedeliver="true"
			overwrite="true"
			publishivy="false"
			pubrevision="${ivy.pom.version}"
			resolver="${ivy.publish.resolver}"
		>
			<artifacts pattern="${sdk.dir}/dist/${plugin.name}-${plugin.full.version}(-[classifier]).[ext]" />
		</ivy:publish>
	</target>
</project>
